

from delivery import deliver
from datetime import datetime
from package_table import PackageTable


# returns the current status of deliveries given a time
def current_package_status(current_time, events):
    times = list(events.keys())
    times.sort(reverse=True)
    for t in times:
        if current_time >= t:
            return events[t]
    return events[times[-1]]


# merges the event list generated by each truck into one list
def merge(event_list1, event_list2):
    merged_list = {}
    times = list(event_list1.keys()) + list(event_list2.keys())
    for t in times:
        list1_status = current_package_status(t, event_list1)
        list2_status = current_package_status(t, event_list2)
        merged_list[t] = {**list1_status, **list2_status}
    return merged_list


packages = PackageTable()

# Load packages on truck
truck1_packages = [1, 4, 7, 8, 13, 14, 15, 16, 19, 20, 21, 29, 30, 34, 39, 40]
truck2_packages = [2, 3, 5, 6, 10, 17, 18, 25, 26, 28, 31, 32, 33, 36, 37, 38]
truck3_packages = [9, 11, 12, 22, 23, 24, 27, 35]

# Runs deliver function returning the distance the truck traveled, time accrued, and logs events (en route, delivery)
dist_truck1, time_truck1, events_truck1 = deliver(truck1_packages, 1)
dist_truck2, time_truck2, events_truck2 = deliver(truck2_packages, 2, 60 * 60 + 5 * 60)

# determine which driver runs the third truck and provides start time for truck 3
truck3_start = min(time_truck1, time_truck2)
dist_truck3, time_truck3, events_truck3 = deliver(truck3_packages, 3, truck3_start)

# merge each truck's events to provide argument for current_package_status function
master_events = merge(merge(events_truck1, events_truck2), events_truck3)

# Calculate total distance of all trucks
total_distance = dist_truck1 + dist_truck2 + dist_truck3


# Interface print function
def print_package_status(input_time):
    formatted_time = datetime.strptime(input_time, "%H:%M")
    compare_time = datetime.strptime("10:20", "%H:%M")  # Create datetime object for 10:20
    if formatted_time >= compare_time:
        p = packages.lookup(9)
        p.address = '410 S State St (84111)'
        p.zipcode = '84111'
    seconds = (formatted_time - datetime.strptime("8:00", "%H:%M")).total_seconds()
    current_events = current_package_status(seconds, master_events)
    sorted_keys = sorted(current_events.keys())
    for key in sorted_keys:
        packages.lookup(key).status = current_events[key]
        print(f"Package # {key}\n{packages.lookup(key)}\n")
    print(f'Total distance traveled by end of day: {total_distance}\n')


# # Interface
print("\nWelcome to Western Governors University's Package Routing Program!\n\n")
while True:
    user_input = input("Please enter a time (ex. 13:00) to check the status of today's packages (q to quit): ")
    if user_input == 'q':
        break
    print_package_status(user_input)
